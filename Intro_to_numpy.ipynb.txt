{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "# Create a numpy array\n",
    "# 1D array\n",
    "\n",
    "arr1D = np.array([1,2,3,4,5])\n",
    "print(arr1D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n"
     ]
    }
   ],
   "source": [
    "# Creating 2D array - Matrix\n",
    "arr2D = np.array([\n",
    "[1,2,3],[4,5,6]\n",
    "])\n",
    "print(arr2D)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0.]\n",
      " [0. 0. 0.]]\n",
      "[[1. 1. 1.]\n",
      " [1. 1. 1.]]\n",
      "[[6 6 6]\n",
      " [6 6 6]]\n"
     ]
    }
   ],
   "source": [
    "# Creating arrays with default values\n",
    "\n",
    "# Creating Matrix with all values of elements as '0'\n",
    "allZeros = np.zeros((2,3))\n",
    "print(allZeros)\n",
    "\n",
    "# Creating Matrix with all values of elements as '1'\n",
    "allOnes = np.ones((2,3))\n",
    "print(allOnes)\n",
    "\n",
    "# Creating Matrix with all values of elements as 'Constant values - n ~ Fill value'\n",
    "allConstant = np.full((2,3),6)\n",
    "print(allConstant)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "# Create an Identity Matrix - I\n",
    "\n",
    "identity = np.eye(4)\n",
    "print(identity)\n",
    "\n",
    "# Indentity Matrix - Aii = 1 && Aij = 0\n",
    "# For all A Belongs to R MxN\n",
    "# Aij -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.74958926 0.11658588 0.99991612]\n",
      " [0.59061519 0.79562325 0.84093586]\n",
      " [0.5699301  0.11467082 0.14027739]]\n",
      "[[17 18 17]\n",
      " [19 10 16]\n",
      " [17 16 11]]\n"
     ]
    }
   ],
   "source": [
    "# Creating random Matrices\n",
    "\n",
    "# with 0 & 1\n",
    "rand1 = np.random.rand(3,3)\n",
    "print(rand1)\n",
    "\n",
    "# between a and b\n",
    "rand2 = np.random.randint(10,20,(3,3))\n",
    "print(rand2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3 4]\n",
      " [3 4 5 6]]\n",
      "\n",
      "The shape of the array is (2, 4)\n",
      "The size of the array is 8\n",
      "The Data type of the array is int64\n",
      "The Dimension of the array is 2\n"
     ]
    }
   ],
   "source": [
    "# Array Properties\n",
    "arr = np.array([[1,2,3,4],[3,4,5,6]])\n",
    "print(arr)\n",
    "\n",
    "# Shape of array\n",
    "print(f'\\nThe shape of the array is {arr.shape}')\n",
    "\n",
    "# Size of array\n",
    "print(f'The size of the array is {arr.size}')\n",
    "\n",
    "# Datatype of array\n",
    "print(f'The Data type of the array is {arr.dtype}')\n",
    "\n",
    "# Dimensions of array\n",
    "print(f'The Dimension of the array is {arr.ndim}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 8]\n",
      "3\n",
      "[1 2 3]\n",
      "[[1 2 3]\n",
      " [4 5 6]]\n",
      "6\n",
      "[1 2 3]\n",
      "[1 4]\n"
     ]
    }
   ],
   "source": [
    "# Indexing and Slicing\n",
    "\n",
    "# Access the elements in ID Array\n",
    "\n",
    "arr = np.array([1,2,3,8])\n",
    "print(arr)\n",
    "print(arr[2])\n",
    "\n",
    "# Slicing the elements\n",
    "\n",
    "print(arr[0:3])\n",
    "\n",
    "# Access the elements in 2D Array\n",
    "arr2 = np.array([[1,2,3],[4,5,6]])\n",
    "print(arr2)\n",
    "print(arr2[1,2])\n",
    "\n",
    " # first row with all columns\n",
    "print(arr2[0,:])\n",
    "\n",
    "# first column with all rows\n",
    "print(arr2[:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n",
      "[10  7  4  1]\n"
     ]
    }
   ],
   "source": [
    "#l1 =[]\n",
    "#[l1.append(_) for _ in range(10)]\n",
    "\n",
    "#print(l1)\n",
    "\n",
    "\n",
    "l1 = np.arange(0,10)\n",
    "\n",
    "print(l1)\n",
    "\n",
    "l2 = np.arange(10,-0,-3)\n",
    "print(l2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of a and b is [5 7 9]\n",
      "The diff of a and b is [-3 -3 -3]\n",
      "The product of a and b is [ 4 10 18]\n",
      "The division of a and b is [0.25 0.4  0.5 ]\n"
     ]
    }
   ],
   "source": [
    "# Mathmatical operations\n",
    "\n",
    "a = np.array([1,2,3])\n",
    "b = np.array([4,5,6])\n",
    "\n",
    "print(f'The sum of a and b is {a+b}')\n",
    "print(f'The diff of a and b is {a-b}')\n",
    "print(f'The product of a and b is {a*b}')\n",
    "print(f'The division of a and b is {a/b}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[22 31]\n",
      " [61 82]]\n"
     ]
    }
   ],
   "source": [
    "# Matrix multiplication\n",
    "b1 = np.array([[1,2,3],[4,5,6]])\n",
    "b2 = np.array([[5,6],[7,8],[1,3]])\n",
    "\n",
    "# Dot product  ---- product = AB -- A m x n -- B n x p\n",
    "c = np.dot(b1,b2)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]]\n"
     ]
    }
   ],
   "source": [
    "print(b1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5 6]\n",
      " [7 8]\n",
      " [1 3]]\n"
     ]
    }
   ],
   "source": [
    "print(b2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = np.array([[1,2,3],[4,5,6]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr1 = np.random.randint(1,2,(3,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 1)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = np.dot(arr,arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 6]\n",
      " [15]]\n"
     ]
    }
   ],
   "source": [
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[15 10 10]\n",
      " [15 11 13]\n",
      " [15 12 13]]\n"
     ]
    }
   ],
   "source": [
    "r1 = np.random.randint(10,20,(3,3))\n",
    "print(r1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0.]\n",
      " [0. 1. 0.]\n",
      " [0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "r2 = np.eye(3)\n",
    "print(r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[15. 10. 10.]\n",
      " [15. 11. 13.]\n",
      " [15. 12. 13.]]\n"
     ]
    }
   ],
   "source": [
    "# r1 . I\n",
    "result2 = np.dot(r1,r2)\n",
    "print(result2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# M . I = I . M = M\n",
    "\n",
    "# A . B != B . A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3 3 5]\n",
      " [3 5 4]\n",
      " [3 4 3]]\n",
      "[[3 3 5]\n",
      " [5 3 4]\n",
      " [4 4 4]]\n"
     ]
    }
   ],
   "source": [
    "# Mathematical Operations\n",
    "# + - * /\n",
    "\n",
    "t1 = np.random.randint(3,6,(3,3))\n",
    "t2 = np.random.randint(3,6,(3,3))\n",
    "\n",
    "print(t1)\n",
    "print(t2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 6  6 10]\n",
      " [ 8  8  8]\n",
      " [ 7  8  7]]\n"
     ]
    }
   ],
   "source": [
    "t3 = t1 + t2\n",
    "print(t3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Matrix multiplication\n",
    "result = np.dot(arr,arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Statistical operation\n",
    "mean = t3.mean()\n",
    "max = t3.max()\n",
    "median = np.median(t3)\n",
    "std = np.std(t3)\n",
    "var = np.var(t3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7.555555555555555\n",
      "10\n",
      "8.0\n",
      "1.1653431646335017\n",
      "1.3580246913580245\n"
     ]
    }
   ],
   "source": [
    "print(mean)\n",
    "print(max)\n",
    "print(median)\n",
    "print(std)\n",
    "print(var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(1.3580246913580247)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std * std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Trignometric Functions\n",
    "\n",
    "# sin(x)\n",
    "# cos(x) \n",
    "# ton(x) - sin(x) / cos(x)\n",
    "# cosec - 1 / sin(x)\n",
    "# sec - 1 / cos(x)\n",
    "# cot - 1 / tan(x)\n",
    "\n",
    "angles = np.array([0,15,30,45,60,75,90])\n",
    "\n",
    "# Sin(array)\n",
    "\n",
    "result = np.sin(np.radians(angles))\n",
    "result1 = np.cos(np.radians(angles))\n",
    "result2 = np.tan(np.radians(angles))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.         0.25881905 0.5        0.70710678 0.8660254  0.96592583\n",
      " 1.        ]\n",
      "[1.00000000e+00 9.65925826e-01 8.66025404e-01 7.07106781e-01\n",
      " 5.00000000e-01 2.58819045e-01 6.12323400e-17]\n",
      "[0.00000000e+00 2.67949192e-01 5.77350269e-01 1.00000000e+00\n",
      " 1.73205081e+00 3.73205081e+00 1.63312394e+16]\n"
     ]
    }
   ],
   "source": [
    "print(result)\n",
    "print(result1)\n",
    "print(result2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [3 4]\n",
      " [5 6]]\n",
      "[1 2 3 4 5 6]\n"
     ]
    }
   ],
   "source": [
    "arr = np.array([1,2,3,4,5,6])\n",
    "\n",
    "# Reshape the array\n",
    "reshapedarr = arr.reshape(3,2)\n",
    "\n",
    "print(reshapedarr)\n",
    "\n",
    "# Convert / Flatter any n dim array\n",
    "flattenedarr = arr.flatten()\n",
    "\n",
    "print(flattenedarr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of the arr3 is (2, 4)\n"
     ]
    }
   ],
   "source": [
    "# Stacking the data\n",
    "\n",
    "arr1 = np.array([1,2,3,4])\n",
    "arr2 = np.array([10,20,30,40])\n",
    "\n",
    "arr3 = np.vstack((arr1,arr2))\n",
    "print(f\"The shape of the arr3 is {arr3.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of the arr3 is (3, 4)\n"
     ]
    }
   ],
   "source": [
    "# Stacking the data\n",
    "\n",
    "arr1 = np.array([[1,2,3,4],[2,3,4,5]])\n",
    "arr2 = np.array([10,20,30,40])\n",
    "\n",
    "arr3 = np.vstack((arr1,arr2))\n",
    "print(f\"The shape of the arr3 is {arr3.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The shape of the arr3 is (2, 4)\n",
      "The shape of arr4 is (8,)\n",
      "[ 1  2  3  4 10 20 30 40]\n"
     ]
    }
   ],
   "source": [
    "# Stacking the data\n",
    "\n",
    "arr1 = np.array([1,2,3,4])\n",
    "arr2 = np.array([10,20,30,40])\n",
    "\n",
    "# Vertical Stacking\n",
    "arr3 = np.vstack((arr1,arr2))\n",
    "print(f\"The shape of the arr3 is {arr3.shape}\")\n",
    "\n",
    "# Horizantal Stacking\n",
    "arr4 = np.hstack((arr1,arr2))\n",
    "print(f\"The shape of arr4 is {arr4.shape}\")\n",
    "print(arr4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[40 50 60 70 80]\n"
     ]
    }
   ],
   "source": [
    "# Filtering\n",
    "arr = np.array([10,20,30,40,50,60,70,80])\n",
    "\n",
    "farr = arr[arr >= 40]\n",
    "\n",
    "print(farr)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
